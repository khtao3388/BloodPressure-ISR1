@page "/bpreadings"


@inject IBPReadingRepository repository

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="bpreadings/create">Create New</a>
</p>

@if (bpreadings == null)
{
    <p>Loading...</p>
}
else
{

    <FluentDataGrid Id="priceData" Items="@bpreadings" GridTemplateColumns="1fr 1fr 1fr 1fr 1fr 1fr" TGridItem="BPReading">
        <PropertyColumn Title="Id" Property="@(c => c!.Id)" Align="Align.Center" />
       <PropertyColumn Title="Date and Time" 
           Property="@(c => c!.DateAndTime.ToString("dd MMM yyyy HH:mm"))" Align="Align.Start" />
        <PropertyColumn Title="Systolic" Property="@(c => c!.Systolic)" Align="Align.Center" />
        <PropertyColumn Title="Diastolic" Property="@(c => c!.Diastolic)" Align="Align.Center" />
        <PropertyColumn Title="Heart Rate" Property="@(c => c!.HeartRate)" Align="Align.Center" />
        
        <TemplateColumn Context="bpreadings">
            <a href="@($"bpreadings/edit?id={bpreadings.Id}")">Edit</a> |
            <a href="@($"bpreadings/details?id={bpreadings.Id}")">Details</a> |
            <a href="@($"bpreadings/delete?id={bpreadings.Id}")">Delete</a>
        </TemplateColumn>




    </FluentDataGrid>

    
    
    
}


@code {
    private IQueryable<BPReading> bpreadings;

    protected override async Task OnInitializedAsync()
    {
        // Fetch all readings
        var allReadings = await repository.GetAllAsync();

        // Convert to IQueryable for better performance with QuickGrid
        bpreadings = allReadings.AsQueryable();
    }

    

}